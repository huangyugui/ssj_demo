<?xml version="1.0" encoding="UTF-8"?>
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义日志文件 输入位置 -->
	<property name="log_dir" value="/Users/ChongLou//logs/ev_cmdb" />
	<!-- 日志最大的历史 30天 -->
	<property name="maxHistory" value="30" />
	
	<property name="printPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5level %logger -%msg%n"/>

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${printPattern}</pattern>
		</encoder>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤器，只记录ERROR级别的日志 -->
		<!-- onMatch: DENY，NEUTRAL，ACCEPT其中之一。返回DENY，日志将立即被抛弃不再经过其他过滤器；
			返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；返回ACCEPT，日志会被立即处理，不再经过剩余过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/error-log.log</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每日滚动，且<maxHistory>是30， 
			则只保存最近30天的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>

		<!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。 
			<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy"> 
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern> <minIndex>1</minIndex> 
			<maxIndex>3</maxIndex> </rollingPolicy> -->
		<!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 <triggeringPolicy 
			class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"> <maxFileSize>5MB</maxFileSize> 
			</triggeringPolicy> -->
		
		<!-- 
			%-5level : 左对齐，且最小宽度为5
			%logger{30} : 设置为0，表示只输出logger最右边.符号之后的字符串，例如：
						%logger{0}		mainPackage.sub.sample.Bar		Bar
						%logger{16}		mainPackage.sub.sample.Bar		m.sub.sample.Bar
		 -->
		<encoder>
			<pattern>${printPattern}</pattern>
		</encoder>
	</appender>

	<logger name="java.sql.PreparedStatement" value="DEBUG" />
	<logger name="java.sql.Connection" value="DEBUG" />
	<logger name="java.sql.Statement" value="DEBUG" />
	<logger name="com.ibatis" value="DEBUG" />
	<logger name="com.ibatis.common.jdbc.SimpleDataSource" value="DEBUG" />
	<logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG" />
	<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" value="DEBUG" />
	<logger name="org.apache.commons.jexl2.JexlEngine" level="ERROR" />

	<!-- root级别 DEBUG -->
	<root level="debug">
		<!-- 控制台输出 -->
		<appender-ref ref="CONSOLE" />
		<!-- 文件输出 -->
		<appender-ref ref="ERROR" />
	</root>
</configuration>